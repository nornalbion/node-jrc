Requirements
============

Server
-----

The general strategy is:

* Have all actions happen within server scope
* Store all user data in server scope
* Return pure data from server scope
* Provide JRC protocol in client scope

API documentation will be made from this once the code gets written.

### Conventions and object definitions ###

#### Time ###
* integer time in seconds
* -1 = forever
* 0  = not banned / gagged / etc.

#### Whois ####

#### Mail #####


### Stored Data ###

* Global
    * Waitlist
    * Bans
    * Gags
    * Persistent Rooms
* Rooms
    * Keepouts
* Users
    * Password
    * Access Level

### Temporary Data ###

* Users
    * Effective access level
    * Logged in?
    * Verified?
    * Login time
    * Last active uptime

* Rooms
    * Users in room

### Actions Available ###

Each access level can do the same all below it.
Each action requires the client it was received from to be passed as a parameter

#### Users ####

* Begin Login
    * Params: string `client version`, string `username`
    * Returns: `null`
    * Throws: `BannedError`, `NameInUseError`
* Challenge Response
    * Params: int `response`
    * Returns: boolean indicating success/failure 

      If the challenge was failed, the socket will be disconnected
      after a second (to give time to send a failure response).
    * Throws: `LoginNotBegunError`
* Authenticate to User
    * Params: string `password`
    * Returns: 
      
      If the password was wrong, the socket will be disconnected
      after a second (to give time to send a failure response).
    
    * Throws: `UnverifiedError`, `AuthenticationFailedError`
* Join room
    * Params: string `room`
    * Returns: `null`
    * Throws: `UnverifiedError`, `RoomNotFoundError`, `AccessDeniedError`,  `WaitlistedError`
* Change name
    * Params: string `new name`
    * If you're opped, this will de-op you.
    * If your new name is reserved, the server will ask you for a password.
    * Throws: `UnverifiedError`, `AccessDeniedError`, `NameInUseError`
* Message
    * Params: string `message`
    * Returns: `null`
    * Throws: `UnverifiedError`, `NotInRoomError`
* Private message
    * Params: string `to`, string `message`
    * Throws: `UnverifiedError`, `UserNotFoundError`
<!-- TODO: Check whois params and throws -->
* Whois
    * Params: **??? ????**
    * Returns: a Whois object
    * Throws: `UnverifiedError`, **??? ?? ??? ? ??? ?**
* Entrywhois
    * Params: **??? ?? ???**
    * Returns: a Whois object
    * Throws: `UnverifiedError`, **??? ?? ??? ?**
* Autowhois
    What's up
    * Params: **???? ????**
    * Returns: a Whois object
    * Throws : `UnverifiedError`, **??? ??? ????**
* Gag list
* Ban list
* Keepout list
* Wait list
* Room list
* User list
* Room user list
* Op list
* Room op list
* Number of users on server
    * Returns: int `number of users`
* Number of rooms on server
    * Returns: int `number of rooms`
* Number of users in room
    * Returns: int `number of users`
* Number of messages in mailbox
    * Returns: int `number of messages`
* Number of logs waiting to be output?
    * Returns: int `number of logs`
* Ignore a user
* Keepout info
    * Params: string `user`

#### Tempops ####

* Kick
    <!-- TODO: Check params -->
    * Params: string `user`, int `time`, **reason?**
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`
    * Limits: Te 2h, Op 2wk

#### Ops ####

* Gag
    <!-- TODO: Check params -->
    * Params: string/ip `user`, int `time`, **reason?**
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`
    * Gags the IP at the same time
    * Limit: 2d
* Ban
    <!-- TODO: Check params -->
    * Params: string/ip `user`, int `time`, **reason?**
    * Returns: int `ban time`
    * Throws: `UnverifiedError`, `AccessDeniedError`
    * Limit: 2d
    * Bans the IP at the same time
* Keepout
    <!-- TODO: Check params -->
    * Params: string/ip `user`, int `time`, **reason?**
    * Returns: int `keepout time`
    * Throws: `UnverifiedError`, `AccessDeniedError`
    * Keeps the IP out of the room
    * Limit
* Receive Mail
    * Params: none
    * Returns: list of `Mail` objects
    * Throws: `UnverifiedError`,`AccessDeniedError`
* Send Mail
    * Params: string `user`, string `message`
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`, `UserNotFoundError`
* TempOp/ UnTempOp
    * Params: string `user`
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`, `UserNotFoundError`
* Set User Info
    * Params: string `user`, string `param`, string `value`
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`, `UserNotFoundError`
    * Change other's room
* Set Room Info
    * Params: string `room`, string `param`, string `value`
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`, `RoomNotFoundError`
    * Make/remove temporary room

#### Masters ####

* Set User Info
    * As above
    * Change passwords
* Set Room Info
    * As above
    * Set room permanent
* Shutdown
    * Params: string `reason`
    * Returns: `null`
    * Throws: `UnverifiedError`, `AccessDeniedError`

### Actions Applied to Users ###

* Challenge
    * Params: int `challenge`
* Require Password
    * Params: nothing
* Leave
    * Params: string `reason`
* User Left
    * Params: string `other user`
* User Changed Name
    * Params: string `old name`, string `new name`
* Normal Message
    * Params: string `from`, string `message`
* Private Message
    <!-- TODO: Check params -->
    * Params: string `from`, **to?**, string `message` 
* Entry Whois
    * Params: Whois `whois`
* User Joined Room
    * Params: string `user`, string `room`
* User Kicked
    * Params: array\[string\] `users`, int `time`, \[string `reason`\]
    * This is also how you let a user know they've been kicked. Kicks take you off the server.
* User Banned
    * Params: string `user`, int `time`, \[string `reason`\]
    * You don't let users know they've been banned. I think only tempops and above get this.
* User Gagged
    * Params: string `user`, int `time`, \[
    * This is also how you let a user know they've been gagged.
* Log dumped
    * Params: string **`unknown`**, string **`unknown2`**
    * unknown has dumped a log for unknown2
* Allowed to enter
    * Params: string `room`
* Kicked out
    * Params: string `room`, string `user`

### Errors ###


### Flow ###


#### Room Entry ####

    Server: JRC_ROOM (your_username, roomname)
    Client: JRC_NUMERICINFO JRC_ROOMUSERLIST, roomname
    Client: send JRC_WHOIS, "autowhois" & vbTab & Chr$(JRC_INFO) & Chr$(JRC_ROOMUSERLIST)

or

    Server: JRC_ROOM (their_name, roomname)
    Client: send JRC_WHOIS, "entrywhois" & vbTab & Chr$(JRC_INFO) & Chr$(JRC_USERINFO) & their_name, False

#### Settting Room Permanent ####

    Client: send JRC_SETINFO, Chr$(JRC_ROOMINFO) & currentroom & vbTab & "Permanent" & IIf(permroom, vbTab & "true", "")
 
Client
------
